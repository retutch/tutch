import { states, Lexer, keywords } from 'moo';

export const lexer: Lexer = states(
  {
    main: {
      ident: {
        match: /[A-Za-z0-9_`]+/,
        type: keywords({
          keyword: [
            'annotated',
            'proof',
            'term',
            'val',
            'begin',
            'end',
            'T',
            'F',
            'nat',
            'bool',
            'list',
            'inl',
            'inr',
            'case',
            'of',
            'fst',
            'snd',
            'fn',
            'abort',
            '0',
            's',
            'rec',
            'true',
            'false',
            'if',
            'then',
            'else',
            'nil',
            'eq0',
            'eqS',
            'eqE0S',
            'eqES0',
            'eqESS',
            'less0',
            'lessS',
            'lessE0',
            'lessES',
            'eqN',
            'eqC',
            'eqENC',
            'eqECN',
            'eqECC',
            'Let',
            'Suppose',
          ],
        }),
      },
      linecomment: { match: '% ', push: 'linecomment' },
      comment: { match: '%{', push: 'comment' },
      symbol: /[!$&\(\)*+,\-.\/:;<=>?\[\\\]^{\|}~]/,
      space: { match: /\s+/, lineBreaks: true },
      invalid: { match: /./, lineBreaks: false },
    },
    comment: {
      comment_start: { match: '%{', push: 'comment' },
      comment_end: { match: '}%', pop: 1 },
      space: { match: /\s+/, lineBreaks: true },
      comment: { match: /}|%|[^}%\s]+/, lineBreaks: false },
    },
    linecomment: {
      comment: { match: /[^\n\r]+/, lineBreaks: false },
      comment_end: { match: /\r|\n|\n\r|\r\n/, lineBreaks: true, pop: 1 },
    },
  },
  'main',
);
